package ru.konstantinpetrov;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class HeapSortTest {
    private HeapSort heapSort;

    @BeforeEach
    void setUp(){
        heapSort=new HeapSort();
    }

    @Test
    void testSort(){
        assertAll(
                () -> assertArrayEquals(new int[]{1,2,3,4,5,6,7,8,9,11,12,13,14,15,17}, heapSort.sort(new int[]{12,11,13,5,6,17,3,15,2,7,8,9,14,1,4})),
                () -> assertArrayEquals(new int[]{0}, heapSort.sort(new int[]{0})),
                () -> assertArrayEquals(new int[]{}, heapSort.sort(new int[]{})),
                () -> assertArrayEquals(new int[]{-5,-3,-1,0,1,2,4,5}, heapSort.sort(new int[]{0,-3,4,1,-5,5,-1, 2})),
                () -> assertArrayEquals(new int[]{5,5,5,5,5,5,5,5}, heapSort.sort(new int[]{5,5,5,5,5,5,5,5})),
                () -> assertArrayEquals(new int[]{-2147483648}, heapSort.sort(new int[]{-2147483648})),
                () -> assertArrayEquals(new int[]{2147483647}, heapSort.sort(new int[]{2147483647})),
                () -> assertArrayEquals(new int[]{2137473577, 2137473578, 2137473579, 2137473580, 2137473581, 2137473582, 2137473583, 2137473584, 2137473585, 2137473586, 2137473587, 2137473588, 2137473589, 2137473590, 2137473591, 2137473592, 2137473593, 2137473594, 2137473595, 2137473596, 2137473597, 2137473598, 2137473599, 2147483600, 2147483601, 2147483602, 2147483603, 2147483604, 2147483605, 2147483606, 2147483607, 2147483608, 2147483609, 2147483610, 2147483611, 2147483612, 2147483613, 2147483614, 2147483615, 2147483616, 2147483617, 2147483618, 2147483619, 2147483620, 2147483621, 2147483622, 2147483623, 2147483624, 2147483625, 2147483626, 2147483627, 2147483628, 2147483629, 2147483630, 2147483631, 2147483632, 2147483633, 2147483634, 2147483635, 2147483636, 2147483637, 2147483638, 2147483639, 2147483640, 2147483641, 2147483642, 2147483643, 2147483644, 2147483645, 2147483646, 2147483647}, heapSort.sort(new int[]{2147483647, 2147483646, 2147483645, 2147483644, 2147483643, 2147483642, 2147483641, 2147483640, 2147483639, 2147483638, 2147483637, 2147483636, 2147483635, 2147483634, 2147483633, 2147483632, 2147483631, 2147483630, 2147483629, 2147483628, 2147483627, 2147483626, 2147483625, 2147483624, 2147483623, 2147483622, 2147483621, 2147483620, 2147483619, 2147483618, 2147483617, 2147483616, 2147483615, 2147483614, 2147483613, 2147483612, 2147483611, 2147483610, 2147483609, 2147483608, 2147483607, 2147483606, 2147483605, 2147483604, 2147483603, 2147483602, 2147483601, 2147483600, 2137473599,2137473598, 2137473597, 2137473596, 2137473595, 2137473594, 2137473593, 2137473592, 2137473591, 2137473590, 2137473589, 2137473588, 2137473587, 2137473586, 2137473585, 2137473584, 2137473583, 2137473582, 2137473581, 2137473580, 2137473579, 2137473578, 2137473577}))
        );
    }

    @Test
    void testNullPointerException(){
        assertThrows(NullPointerException.class, () -> heapSort.sort(null));
    }

    @Test
    void testSwap(){
        assertAll(
                ()-> assertArrayEquals(new int[]{2,1}, heapSort.swap(new int[]{1,2},0,1)),
                ()-> assertArrayEquals(new int[]{2,1}, heapSort.swap(new int[]{1,2},1,0)),
                ()-> assertArrayEquals(new int[]{1,2,3,4,5,6,7}, heapSort.swap(new int[]{1,2,5,4,3,6,7},2,4))
        );

    }
}
